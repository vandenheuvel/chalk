initSidebarItems({"fn":[["display_self_where_clauses_as_bounds","Displays a set of bounds, all targeting `Self`, as just the trait names, separated by `+`."],["display_trait_with_assoc_ty_value","Displays a trait with its parameters and a single associated type - something like `IntoIterator<Item=T>`."],["display_type_with_generics","Displays a type with its parameters - something like `AsRef<T>`, OpaqueTyName, or `AdtName<Value>`."],["write_item",""],["write_items","Writes out each item recorded by a [`LoggingRustIrDatabase`]."],["write_stub_items","Writes stubs for items which were referenced by name, but for which we didn't directly access. For instance, traits mentioned in where bounds which are only usually checked during well-formedness, when we weren't recording well-formedness."]],"mod":[["bounds","Writer logic for `where` clauses and other bounds."],["identifiers","Writer logic for simple IDs"],["items","Writer logic for top level items."],["render_trait","`RenderAsRust` trait and related utils."],["state","Persistent state passed down between writers."],["stub","Contains a `LoggingIrDatabase` which returns stub versions of everything queried."],["ty","Writer logic for types."],["utils","Render utilities which don't belong anywhere else."]],"struct":[["DefIdAliases",""],["DisplayRenderAsRust","Displays `RenderAsRust` data."],["InvertedBoundVar","Like a BoundVar, but with the debrujin index inverted so as to create a canonical name we can use anywhere for each bound variable."],["WriterState",""]],"trait":[["RenderAsRust",""]]});